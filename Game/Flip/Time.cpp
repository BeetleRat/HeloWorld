#include"Time.h"

Matr::Matr() // Конструктор
{
	sch = 1;
	n = 0; // Высота птички
	Zero(); // Обнуление матрицы	
}

void Matr::Zero() // Обнуление матрицы
{
	for (int i = 0; i < 20; i++)
		S[i] = "";
	for (int i = 0; i < 20; i++)
	{
		matrix[i] = 0;
		for (int j = 0; j < 100; j++)
		{
			S[i] = S[i] + " ";
		}
	}
	S[n][49] = '*'; // Добавляем птичку
}

int Matr::Tack(int t)// Сдвиг матрицы (t-смещение птички по высоте)
{
	if ((n+t >= 19)&&t>0) // Если птичка на максимальной высоте и делает прыжек
	{
		t = 19 - n; // Высота прыжка равняется той, которой птичке не хватает до максимума до максимума(при добавлении этой высоты к текущей высоте птички результат будет равен 19)
	}
	if ((n <= 0)&&t<0) // Если текущая высота 0 и птичка падает
	{
		t = 0; // Высота падения равна 0
	}
	if (S[n + t][50] == '*') // Если в месте, в которое переместиться птичка на следующем кадре, стена(элемент закрашен)
	{
		Zero(); // Обнулить матрицу
		sch = 1; // Обнуляем текущий счет
		return 0; // Вернуть игровой счет 0(птичка врезалась игра окончена)
	}
	// Если птичка не врежиться на следующем кадре
	// Перерисовываем птичка
	S[n][49] = ' '; // Удаляем птичку из текущего положения
	n = n + t; // Задаем новую высоту птички
	S[n][50] = '*';// Закрашиваем элемент, в котором будет птичка в следующем кадре
	sch++;
	return sch;// Возвращаем текущий счет
}

void Matr::Walls() // Добавление стены
{
	int G; // Высота стены
	G = rand() % 12; // Случайная высота от 0-11 нижней стены
		// Добавление нижней стены в конец матрицы
	for (int i = 0; i < G; i++)
	{
		matrix[i] = 1;
	}
		// Добавление верхней стены в конец матрицы. Свободное место между стенами 7
	for (int i = G+7; i < 20; i++)
	{
		matrix[i] = 1;
	}
}

void Matr::OutPut() // Отрисовка матрицы
{

	for (int i = 19; i >= 0; i--)
	{
		S[i].erase(0, 1); // Удаляем первый символ в строке
		if (matrix[i] == 1) // Если добавляется закрашеный элемент
		{
  			S[i] = S[i] + "*"; // Рисуем звездочку
			matrix[i] = 0; // Обнуляем для следующего цикла
		}
		else  //Если добавляется пустой элемент
		{
			S[i] = S[i] + " "; // Рисуем пробел
		}
		cout << S[i]; // Выводим строку
		cout << endl; //Спускаемся для отрисовки следующей строчки
	}
}
